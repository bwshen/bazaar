"""
Django settings for thesite project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

ALLOWED_HOSTS = []

# Use Google OAuth 2 as the first authentication backend and fall back to
# authenticating for local users.
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'rest_framework_social_oauth2.backends.DjangoOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'permission.backends.PermissionBackend'
)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'default_cache',
        'OPTIONS': {
            'MAX_ENTRIES': 100000,
        }
    }
}

# For security, ensure we only use JSON serialization.
RKELERY_ACCEPT_CONTENT = ['json']

# Periodic global tasks. Most of these run fairly infrequently because the
# periodic schedule is only a fallback to ensure progress is still made
# (although not as fast) in case signals are lost, tasks failed without retry,
# etc. Most tasks are triggered as soon as there is an event or signal
# relevant to the task.
RKELERY_BEAT_SCHEDULE = {
    'FulfillOpenOrders': {
        'task': 'bodega_all.FulfillOpenOrders',
        'schedule': timedelta(minutes=10).total_seconds(),
        'options': {
            'expires': timedelta(minutes=10).total_seconds()
        }
    },
    'IdentifyJenkinsTasks': {
        'task': 'bodega_legacy_items.IdentifyJenkinsTasks',
        # This schedule matches the schedule for ProcessItemsCleanup since
        # it's a dependency for all of the RktestYml cleanup tasks.
        'schedule': timedelta(minutes=3).total_seconds(),
        'options': {
            'expires': timedelta(minutes=3).total_seconds()
        }
    },
    'ProcessItemsCleanup': {
        'task': 'bodega_all.ProcessItemsCleanup',
        # Ideally this would be less frequent, but we don't get any events
        # from Jenkins tasks so we have to poll them somewhat frequently.
        # Later we may split up generic cleanup to run every 10 minutes and
        # poll Jenkins tasks with a separate task running every 1 minute.
        'schedule': timedelta(minutes=3).total_seconds(),
        'options': {
            'expires': timedelta(minutes=3).total_seconds()
        }
    },
    'ProcessOrderTimeLimits': {
        'task': 'bodega_all.ProcessOrderTimeLimits',
        # This is somewhat spammy in task history given that most of the time,
        # orders are nowhere near their notification or ejection times. Later
        # we may try something like setting up dynamic schedules to check on
        # orders more frequently as they get closer to the times that we
        # should be taking action.
        'schedule': timedelta(seconds=30).total_seconds(),
        'options': {
            'expires': timedelta(seconds=30).total_seconds()
        }
    }
}

# Track celery beat scheduler state as Django models.
RKELERY_BEAT_SCHEDULER = 'rkelery.schedulers:DatabaseScheduler'

# Store task results as Django models.
RKELERY_RESULT_BACKEND = 'bigid_django_celery_results.backends:DatabaseBackend'

# Disable result expiration since we'll do our own later.
RKELERY_RESULT_EXPIRES = None

# For security, ensure we only use JSON serialization.
RKELERY_RESULT_SERIALIZER = 'json'

# Include tracebacks in task results.
RKELERY_TASK_REMOTE_TRACEBACKS = True

# For security, ensure we only use JSON serialization.
RKELERY_TASK_SERIALIZER = 'json'

# Raise a soft time limit exception to indicate when tasks should try to
# terminate gracefully. In the future these time limits should be customizable
# per task type, but these defaults should be sensible for most tasks.
RKELERY_TASK_SOFT_TIME_LIMIT = timedelta(minutes=10).total_seconds()

# Kill the worker process when tasks reach their hard time limit.
RKELERY_TASK_TIME_LIMIT = timedelta(minutes=15).total_seconds()

# Track when tasks start so we can show currently running tasks.
RKELERY_TASK_TRACK_STARTED = True

# Application definition

INSTALLED_APPS = [
    # Built in Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Other Django ecosystem apps
    'django_celery_beat',
    'generic_relations',
    'memoize',
    'oauth2_provider',
    'permission',
    'rest_framework',
    'rest_framework.authtoken',
    'social_django',
    # Rubrik apps
    'bigid_django_celery_results',
    'bodega_all',
    'bodega_aws',
    'bodega_cdm_items',
    'bodega_core',
    'bodega_crdb_dev_items',
    'bodega_vsphere',
    'bodega_vsphere_items',
    'bodega_generic_items',
    'bodega_kubernetes',
    'bodega_legacy_items',
    'bodega_sd_dev_items',
    'instrumentation',
    'rkelery',
    'site_auth',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'db_query_filter': {
            '()': 'bodega_core.logs.NumericThresholdFilter',
            'name': 'django.db.backends',
            # Match something like:
            # (0.000) QUERY = 'SELECT @@TRANCOUNT' - # PARAMS = (); args=None]
            'pattern': '^\(([^\)]+)\)\s+QUERY\s+.*$',
            'threshold': 0.5
        }
    },
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(levelname)s ' +
                      '<%(process)d.%(threadName)s> [%(name)s] %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S%z'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['db_query_filter'],
            'formatter': 'standard',
            'level': 'DEBUG'
        },
        'syslog': {
            'class': 'logging.handlers.SysLogHandler',
            'address': None,
            'filters': ['db_query_filter'],
            'formatter': 'standard',
            'level': 'DEBUG',
        }
    },
    'loggers': {
        # Root logger settings, inherited by most others.
        # Default to INFO level so we don't get DEBUG spam from third party
        # libraries.
        '': {
            'handlers': ['console', 'syslog'],
            'level': 'INFO',
            'propagate': True
        },

        # DEBUG level for all Bodega apps.
        'bodega_all': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_aws': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'bodega_cdm_items': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'bodega_core': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_generic_items': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_kubernetes': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'bodega_legacy_items': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_physical': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_sd_dev_items': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'bodega_utils': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_vsphere': {
            'level': 'DEBUG',
            'propagate': True
        },
        'bodega_vsphere_items': {
            'level': 'DEBUG',
            'propagate': True
        },
        'instrumentation': {
            'level': 'DEBUG',
            'propagate': True
        },
        'rkelery': {
            'level': 'DEBUG',
            'propagate': True
        },
        'ssh_util': {
            'level': 'DEBUG',
            'propagate': True
        },

        # According to
        # https://www.caktusgroup.com/blog/2015/01/27/Django-Logging-Configuration-logging_config-default-settings-logger/
        # the root logger settings above don't apply, so also explicitly
        # configure django logger.
        'django': {
            'handlers': ['console', 'syslog'],
            'level': 'INFO',
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['console', 'syslog'],
            'level': 'DEBUG',
            'propagate': True
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

PERMISSION_CHECK_TEMPLATES_OPTIONS_BUILTINS = False

REST_FRAMEWORK = {
    # Use only (cookie-based) session authentication for now, but try to
    # support direct OAuth 2 authentication in the future and uncomment the
    # authentication classes accordingly.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'oauth2_provider.ext.rest_framework.OAuth2Authentication',
        # 'rest_framework_social_oauth2.authentication.SocialAuthentication'
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.DjangoObjectPermissions',
    ),
    'PAGE_SIZE': 50
}

ROOT_URLCONF = 'thesite.urls'

# Set SOCIAL_AUTH_GOOGLE_OAUTH2_KEY and SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET in
# local_settings.py. See example for instructions.
SOCIAL_AUTH_GOOGLE_OAUTH2_USE_UNIQUE_USER_ID = True
SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = ['rubrik.com']

# This needs to match the location configured in the web server that's serving
# static files (like Nginx). If it doesn't, then override its value in
# local_settings.py.
STATIC_ROOT = '/usr/src/app/static/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'thesite', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
            'debug': True,
        },
    },
]

WSGI_APPLICATION = 'thesite.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Stats related settings. For production deployments,
# we override these in local_settings.py
STATSD_HOST = 'localhost'
STATSD_PORT = 8125

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# Detect whether we're running unit tests using technique suggested at
# http://stackoverflow.com/questions/6957016/detect-django-testing-mode
import sys
if 'test' in sys.argv:
    # Only install bodega_test_items when it's being used, which is for unit
    # tests. This avoids any risk of test code interfering with production,
    # in particular avoiding database migrations.
    INSTALLED_APPS += [
        'bodega_test_items'
    ]

try:
    from .local_settings import *
except ImportError as e:
    pass

if 'ENABLE_ORDER_PRICE_PRIORITY' in locals() and ENABLE_ORDER_PRICE_PRIORITY:
    # Open orders will be fulfilled by their price-based priorities.
    pass
else:
    # Else fulfillment will use ctime-based priority.
    ENABLE_ORDER_PRICE_PRIORITY = False

if 'ENABLE_PHYSICAL_STOCK' in locals() and ENABLE_PHYSICAL_STOCK:
    INSTALLED_APPS += ['bodega_physical']
else:
    ENABLE_PHYSICAL_STOCK = False

if 'BLOCK_DYNAPODS_FROM_NON_JENKINS_USERS' in locals() and BLOCK_DYNAPODS_FROM_NON_JENKINS_USERS:
    # Dynapods will only be available for Jenkins users
    pass
else:
    # Dynapods will be open for all users
    BLOCK_DYNAPODS_FROM_NON_JENKINS_USERS = False
