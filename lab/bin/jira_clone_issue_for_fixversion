#!/usr/bin/env python

import logging
import os
import sys

from jira.client import JIRAError

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
SCRIPT_NAME = os.path.basename(__file__)
SDMAIN_ROOT = os.path.abspath(os.path.join(SCRIPT_DIR, '..', '..'))

sys.path.append(os.path.join(SDMAIN_ROOT, 'src', 'scripts', 'dev'));
import logging_utils

log = logging.getLogger(__name__)

sys.path.append(os.path.join(SDMAIN_ROOT, 'src', 'py', 'issue_tracking'));
from jira_util import JiraUtil, JiraUtilException


def usage():
    print 'Usage: %s issue-id fix-version-1 [fix-version-2 ...]' % SCRIPT_NAME
    sys.exit(1)


if __name__ == '__main__':
    # We disable most console logging so that the terminal output would
    # look clean and would be easy to decipher.
    logging_utils.init_logging(console_handler_level='CRITICAL')

    # Command-line arguments processing and sanity checks.
    if len(sys.argv) < 3:
        usage()
    issue_id = sys.argv[1]
    fix_versions = sys.argv[2:]
    unique_fix_versions = set(fix_versions)
    if len(unique_fix_versions) != len(fix_versions):
        print '%s: Error.  Fix versions must be all different' % SCRIPT_NAME
        sys.exit(2)

    jira = JiraUtil()
    for fix_version in fix_versions:
        print 'Cloning %s to %s...' % (issue_id, fix_version),
        try:
            clone = jira.clone_issue_for_fixversion(issue_id, fix_version)
            print 'done, created %s.  Linking both issues...' % clone['key'],
            jira.link_issues(issue_id, 'Relates', clone['key'])
            print 'done.'
        except (JiraUtilException, JIRAError) as e:
            log.error(e)
            print 'failed!!!  See log for more details.'
