"""RKelery signals."""
import logging
import logging.config
import threading
from datetime import timedelta

from celery.signals import before_task_publish, setup_logging, task_prerun
from django.conf import settings
from django.db import transaction
from django.utils.dateparse import parse_datetime
from .models import Task
from .utils import json_dump

log = logging.getLogger(__name__)


def _datetime_or_none(s):
    if not s:
        return None
    return parse_datetime(s)


def _duration_or_none(s):
    if not s:
        return None
    return timedelta(seconds=float(s))


@setup_logging.connect
def set_up_logging_from_django_settings(sender=None, headers=None, body=None,
                                        **kwargs):
    """Configure Celery logging to use the same settings as Django."""
    logging.config.dictConfig(settings.LOGGING)


@task_prerun.connect
def set_thread_name_for_task(sender=None, headers=None, body=None, **kwargs):
    """Include the task ID in the task's thread name.

    This makes it easy to search/grep for all log messages from a task
    instance, including those generated by code that isn't aware it's running
    as part of a Celery task.
    """
    from celery import current_task
    threading.current_thread().name = (
        'ThreadForTask-%s' % current_task.request.id)


@before_task_publish.connect
def track_task_publish(sender=None, headers=None, body=None, **kwargs):
    """Track information about a task as it's about to be published.

    This saves useful information about the task instance itself, particularly
    the task type and arguments. This information complements the result
    information in the TaskResult model.
    """
    task_id = headers['id']
    # The time limit fields seem to be reversed compared to what's claimed at
    # http://docs.celeryproject.org/en/latest/internals/protocol.html#version-2  # noqa
    (hard, soft) = headers.get('timelimit', (None, None))
    (task_args, task_kwargs, embed) = body
    with transaction.atomic():
        task = Task.objects.create(
            task_id=task_id,
            task=headers['task'],
            root_id=headers.get('root_id', None),
            parent_id=headers.get('parent_id', None),
            group_id=headers.get('group', None),
            meth=headers.get('meth', None),
            shadow=headers.get('shadow', None),
            eta=_datetime_or_none(headers.get('eta', None)),
            expires=_datetime_or_none(headers.get('expires', None)),
            retries=headers.get('retries', None),
            soft_time_limit=_duration_or_none(soft),
            hard_time_limit=_duration_or_none(hard),
            origin=headers.get('origin', None),
            args=task_args,
            kwargs=task_kwargs,
            embed_json=json_dump(embed))
        log.debug('Publishing task %s.' % str(task))
